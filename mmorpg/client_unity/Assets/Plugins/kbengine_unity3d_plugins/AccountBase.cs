/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Account : AccountBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Account.def
	public abstract class AccountBase : Entity
	{
		public EntityBaseEntityCall_AccountBase baseEntityCall = null;
		public EntityCellEntityCall_AccountBase cellEntityCall = null;

		public UInt64 lastSelCharacter = 0;
		public virtual void onLastSelCharacterChanged(UInt64 oldValue) {}

		public abstract void onCreateAvatarResult(Byte arg1, AVATAR_INFOS arg2); 
		public abstract void onRemoveAvatar(UInt64 arg1); 
		public abstract void onReqAvatarList(AVATAR_INFOS_LIST arg1); 

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_AccountBase();
			baseEntityCall.id = id;
			baseEntityCall.className = className;
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_AccountBase();
			cellEntityCall.id = id;
			cellEntityCall.className = className;
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void onRemoteMethodCall(Method method, MemoryStream stream)
		{
			switch(method.methodUtype)
			{
				case 10005:
					Byte onCreateAvatarResult_arg1 = stream.readUint8();
					AVATAR_INFOS onCreateAvatarResult_arg2 = ((DATATYPE_AVATAR_INFOS)method.args[1]).createFromStreamEx(stream);
					onCreateAvatarResult(onCreateAvatarResult_arg1, onCreateAvatarResult_arg2);
					break;
				case 3:
					UInt64 onRemoveAvatar_arg1 = stream.readUint64();
					onRemoveAvatar(onRemoveAvatar_arg1);
					break;
				case 10003:
					AVATAR_INFOS_LIST onReqAvatarList_arg1 = ((DATATYPE_AVATAR_INFOS_LIST)method.args[0]).createFromStreamEx(stream);
					onReqAvatarList(onReqAvatarList_arg1);
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(Property prop, MemoryStream stream)
		{
			switch(prop.properUtype)
			{
				case 40001:
					Vector3 oldval_direction = direction;
					direction = stream.readVector3();

					if(prop.isBase())
					{
						if(inited)
							onDirectionChanged(oldval_direction);
					}
					else
					{
						if(inWorld)
							onDirectionChanged(oldval_direction);
					}

					break;
				case 2:
					UInt64 oldval_lastSelCharacter = lastSelCharacter;
					lastSelCharacter = stream.readUint64();

					if(prop.isBase())
					{
						if(inited)
							onLastSelCharacterChanged(oldval_lastSelCharacter);
					}
					else
					{
						if(inWorld)
							onLastSelCharacterChanged(oldval_lastSelCharacter);
					}

					break;
				case 40000:
					Vector3 oldval_position = position;
					position = stream.readVector3();

					if(prop.isBase())
					{
						if(inited)
							onPositionChanged(oldval_position);
					}
					else
					{
						if(inWorld)
							onPositionChanged(oldval_position);
					}

					break;
					case 40002:
						stream.readUint32();
						break;
				default:
					break;
			};
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs[className];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[1];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			UInt64 oldval_lastSelCharacter = lastSelCharacter;
			Property prop_lastSelCharacter = pdatas[3];
			if(prop_lastSelCharacter.isBase())
			{
				if(inited && !inWorld)
					onLastSelCharacterChanged(oldval_lastSelCharacter);
			}
			else
			{
				if(inWorld)
				{
					if(prop_lastSelCharacter.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onLastSelCharacterChanged(oldval_lastSelCharacter);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[0];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

		}
	}
}